# use CircleCI 2.0
version: 2
jobs:
  build:
    parallelism: 1
    # directory where steps will run
    working_directory: ~/annict
    docker:
      - image: circleci/ruby:2.5.1-node
        environment:
          BUNDLE_JOBS: 3
          BUNDLE_RETRY: 3
          BUNDLE_PATH: vendor/bundle
          RAILS_ENV: test
          TZ: Asia/Tokyo
          # The `CFLAGS` and `CXXFLAGS` are required to install cld gem
          # https://github.com/jtoy/cld/issues/10
          CFLAGS: -Wno-narrowing
          CXXFLAGS: -Wno-narrowing
      - image: circleci/postgres:10.4-alpine
        environment:
          POSTGRES_USER: postgres
          POSTGRES_DB: annict_test
          POSTGRES_PASSWORD: ""
    steps:
      # special step to check out source code to working directory
      - checkout

      # Which version of bundler?
      - run:
          name: Which bundler?
          command: bundle -v

      # Restore bundler cache
      - restore_cache:
          keys:
            - annict-bundler-{{ checksum "Gemfile.lock" }}
            - annict-bundler-

      - run:
          name: Bundle Install
          command: bundle check || bundle install

      # Store bundler cache
      - save_cache:
          key: annict-bundler-{{ checksum "Gemfile.lock" }}
          paths:
            - vendor/bundle

      # Restore yarn cache
      - restore_cache:
          keys:
            - annict-yarn-{{ checksum "yarn.lock" }}
            - annict-yarn-

      - run:
          name: Yarn Install
          command: yarn install --cache-folder ~/.cache/yarn

      # Store yarn / webpacker cache
      - save_cache:
          key: annict-yarn-{{ checksum "yarn.lock" }}
          paths:
            - ~/.cache/yarn

      - run:
          name: Wait for DB
          command: dockerize -wait tcp://localhost:5432 -timeout 1m

      - run:
          name: Copy application.yml
          command: cp config/application.yml{.example,}

      - run:
          name: Database setup
          command: bin/rails db:schema:load --trace

      - run:
          name: Run rspec in parallel
          command: |
            bundle exec rspec --profile 1 \
                              --format RspecJunitFormatter \
                              --out test_results/rspec.xml \
                              --format documentation \
                              $(circleci tests glob "spec/**/*_spec.rb" | circleci tests split --split-by=timings)

      # Save test results for timing analysis
      - store_test_results:
          path: test_results
