- title = t "head.title.reviews.show", profile_name: @user.profile.name, username: @user.username, work_title: @work.decorate.local_title
- description = meta_description t("head.meta.description.reviews.show", profile_name: @user.profile.name, username: @user.username, work_title: @work.decorate.local_title)
- keywords = meta_keywords(@work.decorate.local_title)
- image_url = ann_image_url(@work.work_image, :attachment, size: "640x")
- set_meta_tags(title: title, description: description, keywords: keywords, og: { description: description }, twitter: { description: description, image: image_url }, reverse: true, prefix: false)
- set_page_category "reviews_show"
- breadcrumb :review_detail, @review

= render "application/components/navbar"

.p-application__content
  .container.py-1.mb-1
    = render "application/components/breadcrumb"
    .row
      .col-9.pr-0
        .c-card.py-1
          .container
            = render "reviews/review", review: @review, is_spoiler: @is_spoiler
          hr
          .px-1
            - if user_signed_in?
              .p-reviews-show__comment-form
                = render "review_comments/form", review: @review, review_comment: @review_comment, user: @user
              hr
            - if @review_comments.present?
              - @review_comments.each do |comment|
                .c-review-comment
                  .row
                    .c-review-comment__avatar.col.pr-0.u-flex-grow-0
                      = link_to user_path(comment.user.username) do
                        = ann_image_tag comment.user.profile, :tombo_avatar, size: "50x50", class: "rounded-circle"
                    .col
                      .row.mb-zp5
                        .col
                          = link_to comment.user.profile.name, user_path(comment.user.username)
                        .col
                          .small.text-right
                            = local_time_ago_in_words(comment.created_at)
                      c-body inline-template=""
                        .c-body__content = comment.body
                  .text-right
                    c-like-button resource-name="ReviewComment" :init-resource-id="#{comment.id}" :init-likes-count="#{comment.likes_count}" :init-is-liked="#{user_signed_in? && current_user.like?(comment)}" :is-signed-in="#{user_signed_in?}"
                  - if policy(comment).update?
                    .small.text-right.mb-zp5
                      = link_to edit_review_comment_path(comment), class: "mr-zp5" do
                        = icon "edit", class: "mr-zp25"
                        = t "noun.edit"
                      = link_to review_comment_path(comment), method: :delete, data: { confirm: t("messages._common.are_you_sure") } do
                        = icon "trash-o", class: "mr-zp25"
                        = t "noun.delete"
            - else
              = render "application/components/empty", text: t("resources.comment.no_comments")
      .col-3
        .mb-zp5
          = link_to work_path(@work) do
            = ann_image_tag @work.work_image, :attachment, size: "280x373", class: "img-fluid img-thumbnail rounded"
          - if @work.work_image.present?
            .u-very-small.text-right
              = @work.work_image.decorate.asin_or_copyright_text
        h2.font-weight-bold.mb-1
          = link_to @work.decorate.local_title, work_path(@work), class: "u-text-body"
        .mb-zp5
          = link_to work_path(@work), class: "btn btn-primary w-100" do
            = icon "angle-right"
            = t "verb.view_work_detail"
        c-status-selector :work-id="#{@work.id}"
        
        - if @review.status_changed_users_count > 0
          .mt-zp25.small.text-muted
            = t "messages.reviews.n_people_changed_status_to_wanna_watch", count: @review.status_changed_users_count

= render "application/components/footer"

- content_for :js_templates do
  = render "application/js_templates/like_button"
  = render "application/js_templates/rating_state_label"
  = render "application/js_templates/status_selector"
