- title = t "head.title.episodes.show", work_title: @work.decorate.local_title, episode_title_with_number: @episode.decorate.title_with_number
- description = meta_description(t("head.meta.description.episodes.show", work_title: @work.decorate.local_title, episode_title_with_number: @episode.decorate.title_with_number))
- keywords = meta_keywords(@work.decorate.local_title)
- image_url = ann_image_url(@work.work_image, :attachment, size: "640x")
- set_meta_tags(title: title, description: description, keywords: keywords, og: { description: description, image: image_url }, twitter: { description: description, image: image_url }, reverse: true, prefix: false)
- set_page_category "episodes_show"

= render "works/header", work: @work

.c-card.mb-1.py-1
  .p-episode-title-header
    - if @episode.prev_episode.present?
      = link_to work_episode_path(@work, @episode.prev_episode), class: "p-episode-title-header__prev h3 text-center mb-0" do
        = icon "angle-left"
    .p-episode-title-header__main
      h2.h4.font-weight-bold.text-center
        = link_to @episode.decorate.title_with_number, work_episode_path(@work, @episode), class: "u-text-body"
      - if user_signed_in? && current_user.tracked?(@episode)
        .text-center.small
          = icon "check-circle", class: "mr-zp25 u-text-green"
          = t "messages.episodes.watched_x_times", records_count: current_user.checkins_count_in(@episode)
      .container.mt-1
        .row
          .col.text-center.u-lh-sm
            = @episode.score.round(1)
            .small
              | Score
          .col.text-center.u-lh-sm
            = @all_records.count
            .small
              | Records
          .col.text-center.u-lh-sm
            = @all_records.with_comment.count
            .small
              | Comments
    - if @episode.next_episode.present?
      = link_to work_episode_path(@work, @episode.next_episode), class: "p-episode-title-header__next h3 text-center mb-0" do
        = icon "angle-right"

.c-card.mb-2.py-1
  - if user_signed_in?
    .container
      = render "records/form", record: @record
    hr
  .container
    - if user_signed_in?
      .text-center.mb-1
        .btn-group.btn-group-sm
          = active_link_to switch_episode_records_path(@episode, to: :all_comments), class: "btn", class_active: "btn-primary", class_inactive: "btn-secondary", active: (user_signed_in? ? current_user.setting.display_option_record_list.all_comments? : false ), data: { method: :post } do
            .u-very-small
              = t "noun.all_comments"
              span.ml-zp25 = "(#{@all_comment_records.total_count})"
          = active_link_to switch_episode_records_path(@episode, to: :friend_comments), class: "btn", class_active: "btn-primary", class_inactive: "btn-secondary", active: (user_signed_in? ? current_user.setting.display_option_record_list.friend_comments? : false ), data: { method: :post } do
            .u-very-small
              = t "noun.friend_comments"
              span.ml-zp25 = "(#{@friend_comment_records.blank? ? 0 : @friend_comment_records.total_count})"
          = active_link_to switch_episode_records_path(@episode, to: :my_records), class: "btn", class_active: "btn-primary", class_inactive: "btn-secondary", active: (user_signed_in? ? current_user.setting.display_option_record_list.my_records? : false ), data: { method: :post } do
            .u-very-small
              = t "noun.my_records"
              span.ml-zp25 = "(#{@my_records.blank? ? 0 : @my_records.total_count})"
    - if @selected_comment_records.present?
      - if user_signed_in?
        .text-right.mb-1
          c-record-sorter current-url="#{request.url}"
      .c-record-list
        - @selected_comment_records.each do |record|
          = render "records/record", record: record, is_spoiler: @is_spoiler
      - if @selected_comment_records.total_pages > 1
        .mt-2.text-center
          = paginate @selected_comment_records
    - else
      = render "application/components/empty", text: t("messages.episodes.no_comments")

= render "application/components/footer"
= render "application/components/tabbar"

- content_for :js_templates do
  = render "application/js_templates/like_button"
  = render "application/js_templates/mute_user_button"
  = render "application/js_templates/status_selector"
  = render "application/js_templates/rating_state_label"
  = render "application/js_templates/record_sorter"
